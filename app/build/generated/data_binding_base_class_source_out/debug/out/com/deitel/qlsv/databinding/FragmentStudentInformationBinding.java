// Generated by view binder compiler. Do not edit!
package com.deitel.qlsv.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.viewbinding.ViewBinding;
import com.deitel.qlsv.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentStudentInformationBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button btnlogoutstudent;

  @NonNull
  public final ImageView imageView3;

  @NonNull
  public final Toolbar toolbarSubjectStudent;

  @NonNull
  public final TextView txtStudentCode;

  @NonNull
  public final TextView txtStudentName;

  @NonNull
  public final TextView txtStudentSex;

  @NonNull
  public final TextView txtStudentdateofbirth;

  private FragmentStudentInformationBinding(@NonNull LinearLayout rootView,
      @NonNull Button btnlogoutstudent, @NonNull ImageView imageView3,
      @NonNull Toolbar toolbarSubjectStudent, @NonNull TextView txtStudentCode,
      @NonNull TextView txtStudentName, @NonNull TextView txtStudentSex,
      @NonNull TextView txtStudentdateofbirth) {
    this.rootView = rootView;
    this.btnlogoutstudent = btnlogoutstudent;
    this.imageView3 = imageView3;
    this.toolbarSubjectStudent = toolbarSubjectStudent;
    this.txtStudentCode = txtStudentCode;
    this.txtStudentName = txtStudentName;
    this.txtStudentSex = txtStudentSex;
    this.txtStudentdateofbirth = txtStudentdateofbirth;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentStudentInformationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentStudentInformationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_student_information, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentStudentInformationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnlogoutstudent;
      Button btnlogoutstudent = rootView.findViewById(id);
      if (btnlogoutstudent == null) {
        break missingId;
      }

      id = R.id.imageView3;
      ImageView imageView3 = rootView.findViewById(id);
      if (imageView3 == null) {
        break missingId;
      }

      id = R.id.toolbarSubjectStudent;
      Toolbar toolbarSubjectStudent = rootView.findViewById(id);
      if (toolbarSubjectStudent == null) {
        break missingId;
      }

      id = R.id.txtStudentCode;
      TextView txtStudentCode = rootView.findViewById(id);
      if (txtStudentCode == null) {
        break missingId;
      }

      id = R.id.txtStudentName;
      TextView txtStudentName = rootView.findViewById(id);
      if (txtStudentName == null) {
        break missingId;
      }

      id = R.id.txtStudentSex;
      TextView txtStudentSex = rootView.findViewById(id);
      if (txtStudentSex == null) {
        break missingId;
      }

      id = R.id.txtStudentdateofbirth;
      TextView txtStudentdateofbirth = rootView.findViewById(id);
      if (txtStudentdateofbirth == null) {
        break missingId;
      }

      return new FragmentStudentInformationBinding((LinearLayout) rootView, btnlogoutstudent,
          imageView3, toolbarSubjectStudent, txtStudentCode, txtStudentName, txtStudentSex,
          txtStudentdateofbirth);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
