// Generated by view binder compiler. Do not edit!
package com.deitel.qlsv.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.deitel.qlsv.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ListsubjectBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView TextViewCredit;

  @NonNull
  public final TextView TextViewIdSubject;

  @NonNull
  public final ImageButton subjectdelete;

  @NonNull
  public final ImageButton subjectinformation;

  @NonNull
  public final ImageButton subjectupdate;

  private ListsubjectBinding(@NonNull LinearLayout rootView, @NonNull TextView TextViewCredit,
      @NonNull TextView TextViewIdSubject, @NonNull ImageButton subjectdelete,
      @NonNull ImageButton subjectinformation, @NonNull ImageButton subjectupdate) {
    this.rootView = rootView;
    this.TextViewCredit = TextViewCredit;
    this.TextViewIdSubject = TextViewIdSubject;
    this.subjectdelete = subjectdelete;
    this.subjectinformation = subjectinformation;
    this.subjectupdate = subjectupdate;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ListsubjectBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ListsubjectBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.listsubject, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ListsubjectBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.TextViewCredit;
      TextView TextViewCredit = rootView.findViewById(id);
      if (TextViewCredit == null) {
        break missingId;
      }

      id = R.id.TextViewIdSubject;
      TextView TextViewIdSubject = rootView.findViewById(id);
      if (TextViewIdSubject == null) {
        break missingId;
      }

      id = R.id.subjectdelete;
      ImageButton subjectdelete = rootView.findViewById(id);
      if (subjectdelete == null) {
        break missingId;
      }

      id = R.id.subjectinformation;
      ImageButton subjectinformation = rootView.findViewById(id);
      if (subjectinformation == null) {
        break missingId;
      }

      id = R.id.subjectupdate;
      ImageButton subjectupdate = rootView.findViewById(id);
      if (subjectupdate == null) {
        break missingId;
      }

      return new ListsubjectBinding((LinearLayout) rootView, TextViewCredit, TextViewIdSubject,
          subjectdelete, subjectinformation, subjectupdate);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
